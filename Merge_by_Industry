import pandas as pd
from Levenshtein import distance as lvdist
import re

def first_col(data): return data[data.columns[0]]

def pre_proc(x, l = 2):
    x = str(x).upper()
    if '(' in x: x = x[:x.find('(')]
    remove_chars = ['.', '\\', '/', ')', '(', '&', 'AND', 'SERVICES', ':']
    for c in remove_chars:
        x.replace(c, ' ')
    words = x.split()
    if (len(words) > l): x = ' '.join(words[:l])
    if '(' in x: x = x[:x.find('(')]
    return x



def get_ind(data, target_inds):
    target_inds = set(target_inds.unique())
    new_inds = dict()
    
    def insert_new_ind(regex, ind_name, delete = False):
        r = re.compile(regex)
        for v in filter(r.match, target_inds):
            target_inds.add(ind_name)
            if delete: target_inds.remove(v)
            new_inds[ind_name] = v
            break
            

    def get_closest(ind_name, inds_set):
        def min_key(x):
            dists = []
            for l in range(1, 5):
                dists.append(lvdist(pre_proc(ind_name, l), pre_proc(x, l)))
            return min(dists)
        result_ind = min(inds_set, key = min_key)
        return new_inds[result_ind] if result_ind in new_inds else result_ind
    
    insert_new_ind(".*R\.E\.I\.T.*", "Real Estate Investment Trusts", delete = True)
    insert_new_ind(".*Data*", "EDP")

    d = dict([(ind_name, get_closest(ind_name, target_inds)) for ind_name in data.unique()])
    return data.apply(lambda x: d[x])


#This is the main function
def merge_by_industry(data, new_data, drop = False):
    '''
    data: main data
    new_data: new data we want to merge by industry 
    (assume first column in new_data is industry)
    '''
    inds = pd.Series(data.industry.unique())
    target_inds = get_ind(data.industry, first_col(new_data))
    data_merged = data.set_index(target_inds)
    data_merged = data_merged.join(new_data.set_index(new_data.columns[0], drop = False))
    data_merged.index = range(len(data_merged))
    return data_merged
